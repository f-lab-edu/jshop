plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'jacoco'
}

allprojects {
    group = 'jshop'
    version = '0.1.8'

    java {
        sourceCompatibility = '17'
    }

    repositories {
        mavenCentral()
    }
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        // spring
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        // spring

        // utils
        implementation 'net.logstash.logback:logstash-logback-encoder:8.0'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'com.fasterxml.jackson.core:jackson-databind'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
        implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
        implementation 'org.springframework.retry:spring-retry'
        implementation 'org.springframework.data:spring-data-envers'
        // utils

        // test
        implementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        implementation 'org.testcontainers:testcontainers:1.20.0'
        implementation 'org.testcontainers:junit-jupiter:1.20.0'
        implementation 'org.testcontainers:mysql:1.20.0'
        implementation "com.redis:testcontainers-redis:2.2.2"
        // test
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required.set(true)
            html.required.set(true)
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.1 // 커버리지 최소 기준 (80%)
                }
            }
        }
    }

    test.finalizedBy jacocoTestCoverageVerification
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn subprojects*.test
    executionData.setFrom(files(subprojects*.jacocoTestReport.executionData))

    subprojects.each { subproject ->
        sourceSets subproject.sourceSets.main
    }

    reports {
        xml.required.set(true)
        html.required.set(true)
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**',
                    '**/config/**',
                    '**/Q*',
                    '**/scripts/**',
                    '**/*Application*',
                    '**/*Config*',
                    '**/aop/**',
                    '**/*Builder*',
                    '**/*Util*'
            ])
        }))
    }
}