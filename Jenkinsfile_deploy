pipeline {
    agent any
    
    environment {        
        NCLOUD_ACCESS_KEY_ID = credentials('NCLOUD_ACCESS_KEY_ID')
        NCLOUD_SECRET_KEY = credentials('NCLOUD_SECRET_KEY')
        IMAGE = 'jshop.kr.ncr.ntruss.com/jshop:v0.0.1'
    }

    stages {
        stage('Test') {
            steps {
                script {
                    dir('be') {                
                       echo 'Test'
                        sh './gradlew clean test'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    dir('be') {
                        echo 'build'
                        sh "docker build -t ${IMAGE} ."
                    }                    
                }
            }
        }

        stage('NCR_Push') {
            steps {
                script {
                    echo 'push'
                    sh "echo ${NCLOUD_SECRET_KEY} | docker login jshop.kr.ncr.ntruss.com -u ${NCLOUD_ACCESS_KEY_ID} --password-stdin"                
                    sh "docker push ${IMAGE}"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    def SERVERS = [:]
                    configFileProvider([configFile(fileId: 'a05b0d1b-420b-4e46-a827-9b7bae9b7e25', variable: 'JSON_CONFIG_FILE')]) {
                        def jsonContent = readFile(file: JSON_CONFIG_FILE)
                                            
                        def jsonConfig = new groovy.json.JsonSlurper().parseText(jsonContent)
                        SERVERS = jsonConfig.servers
                    }
                    
                    SERVERS.each { server ->
                        sshagent(['ssh-deploy-key']) {
                            sh "ssh jhkim@${server} 'echo $NCLOUD_SECRET_KEY | docker login jshop.kr.ncr.ntruss.com -u ${NCLOUD_ACCESS_KEY_ID} --password-stdin'"
                            sh "ssh jhkim@${server} 'docker service update --image ${IMAGE} jshop_jshop --with-registry-auth'"
                        }
                    }                                            
                }
            }
        }
    }
    post {
        always {
            dir('be') {                
                junit 'build/test-results/test/*.xml'
            }
        }
    }
}